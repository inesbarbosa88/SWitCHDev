@startuml
title US25: I Want to Know the Average Grade of a Course Edition


class US25_IWantToKnowTheAverageGradeOfACourseEdition {
    -_studentGradeList: StudentGradeRepository
    +US25_IWantToKnowTheAverageGradeOfACourseEdition(studentGradeList: StudentGradeRepository)
    +IWantToKnowTheAvgGrade(courseEditionID : CourseEditionID): double
}

package "StudentGrade" {
entity "<<root>>\nStudentGrade" {
    -_grade: Grade
    -_date: LocalDate
    -_studentGradeID: StudentGradeID
    -_studentID: StudentID
    -_courseEditionID: CourseEditionID
    +hasThisCourseEdition(courseEditionID : CourseEditionID): boolean
    +knowCourseEdition()
    +get_student()
    +get_courseEdition()
    +equals(o: Object): boolean
    }
}


class Grade <<ValueObject>> {
    -_grade: double
    +knowGrade(): double
}

class LocalDate <<ValueObject>> {
    -date: String
    +isDateValid(date: String): void
    +get_date(): LocalDate
}


class StudentGradeID <<ValueObject>> {
    -_studentGradeID: Long
    -_courseEditionID: Long
    -_studentID: Long
}

interface IStudentGradeFactory {
    +newStudentGrade(grade: Grade, date: LocalDate, studentID: StudentID, courseEditionID: CourseEditionID): StudentGrade
}

class StudentGradeFactoryImpl {
    +newStudentGrade(grade: Grade, date: LocalDate, studentID: StudentID, courseEditionID: CourseEditionID): StudentGrade
}

interface IStudentGradeListFactory {
    +newArrayList(): ArrayList<StudentGrade>
}

class StudentGradeListFactoryImpl {
    +newArrayList(): ArrayList<StudentGrade>
}

class StudentGradeRepository {
    -_studentGradeFactory: IStudentGradeFactory
    -_studentGradeList: List<StudentGrade>
    +addGradeToStudent(grade: Grade, date: LocalDate, studentID: StudentID, courseEditionID: CourseEditionID): boolean
    +knowAverageGrade(courseEditionID: CourseEditionID): Double
    +knowApprovalRate(courseEditionID: CourseEditionID): double
}

interface IStudentGradeRepository {
    +addGradeToStudent(grade: Grade, date: LocalDate, studentID: StudentID, courseEditionID: CourseEditionID): boolean
    +knowAverageGrade(courseEditionID: CourseEditionID): Double
    +knowApprovalRate(courseEditionID: CourseEditionID): double
}

class List<StudentGrade> {
}

package "Student" {
class "<<root>>\nStudent" {
    -_studentID: StudentID
    -_name: Name
    -_nif: NIF
    -_phone: Phone
    -_email: Email
    -_institutionalEmail: InstitutionalEmail
    -_address: Address
    +hasSameUniqueNumber(student: Student): boolean
    +hasSameNIF((student: Student): boolean
    +getUniqueNumber(): String
    +hasThisUniqueNumber(student: Student): boolean
    }
}

class Name <<ValueObject>> {
    -_name: String
}

class NIF <<ValueObject>> {
    -_nif: String
}

class Phone <<ValueObject>> {
    -_phone: String
}

class Email <<ValueObject>> {
    -_email: String
}

class InstitutionalEmail <<ValueObject>> {
    -_institutionalEmail: String
}

class Address <<ValueObject>> {
    -_address: String
}


class StudentID <<ValueObject>> {
    -_studentID: Long
}

package "CourseEdition" {
class "<<root>>\nCourseEdition" {
    -_courseEditionID: CourseEditionID
    +equals(objectToCompare: Object): boolean
    +setRuc(Teacher: ruc): boolean
    +whatProgrammeEditionBelongsThisCourseEdition()
    +getCourse()
    }
}

class CourseEditionID <<ValueObject>> {
    -_courseEditionID: Long
}

"<<root>>\nStudentGrade" "*" --> "1" Grade
"<<root>>\nStudentGrade" "*" --> "1" LocalDate
"<<root>>\nStudentGrade" --> "1" StudentID: belongs
"<<root>>\nStudentGrade" --> "1" StudentGradeID
"<<root>>\nStudentGrade" -up-> "1" CourseEditionID : refers to
"<<root>>\nStudent" "*" --> "1" Name
"<<root>>\nStudent" "*" --> "1" NIF
"<<root>>\nStudent" "*" --> "1" Email
"<<root>>\nStudent" "*" --> "1" Phone
"<<root>>\nStudent" "*" --> "1" Address
"<<root>>\nStudent" "*" --> "1" StudentID
"<<root>>\nStudent" "*" --> "1" InstitutionalEmail
IStudentGradeRepository "1" ....> IStudentGradeFactory
IStudentGradeRepository "1" ....>  IStudentGradeListFactory
IStudentGradeFactory "1" ....> "Creates" "<<root>>\nStudentGrade"
StudentGradeListFactoryImpl ..|>  IStudentGradeListFactory
IStudentGradeFactory  <|..  StudentGradeFactoryImpl
IStudentGradeListFactory ..|> List
"<<root>>\nStudentGrade" <-- List
StudentGradeRepository <|.. IStudentGradeRepository
List <-- IStudentGradeRepository

"<<root>>\nCourseEdition" --> "1" CourseEditionID

IStudentGradeRepository "1" ....> "*" "<<root>>\nStudentGrade"

US25_IWantToKnowTheAverageGradeOfACourseEdition "1" ..> "1" IStudentGradeRepository
@enduml