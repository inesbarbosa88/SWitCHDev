@startuml
title As an ASC, I want to remove the enrolment of a student in a course edition \n Class Diagram \n Sprint 5 - Spring Data JPA

' ========== SETTINGS ==========
skinparam classBackgroundColor #E1F5FE
skinparam titleFontSize 18
skinparam linetype ortho
skinparam LegendBackgroundColor white
skinparam LegendBorderColor white
skinparam classFontSize 14
skinparam shadowing true
skinparam rectangle {
  RoundCorner 20
}
skinparam classBorderColor Black
left to right direction

' ========== CONTROLLER LAYER ==========
package Controller #F5EEF8{
class US28_EnrolmentRemovalController <<Controller>> {
    +US28_EnrolmentRemovalController (ceeService: ICourseEditionEnrolmentService)
    +removeCourseEditionEnrolment(studentID: StudentID, courseEditionID: CourseEditionID): boolean
}
}


' ========== SERVICE LAYER ==========
package Service {
interface ICourseEditionEnrolmentService <<Interface>> {
    +removeCourseEditionEnrolment (studentID: StudentID,\n courseEditionID: CourseEditionID) : boolean
}

class CourseEditionEnrolmentServiceImpl {
    -courseEditionEnrolmentFactory:\n ICourseEditionEnrolmentFactory
    -programmeEditionEnrolmentFactory:\n IProgrammeEditionEnrolmentFactory
    +removeCourseEditionEnrolment(studentID: StudentID, \ncourseEditionID: CourseEditionID) : boolean
    +hasOtherActiveCourseEditionEnrolments(studentID: StudentID, \nprogrammeEditionID: ProgrammeEditionID): boolean
    +deactivateProgrammeEditionEnrolment(studentID: StudentID, \nprogrammeEditionID: ProgrammeEditionID): boolean
}
}


' ========== REPOSITORY LAYER ==========
package Repository {

interface ICourseEditionEnrolmentRepository <<Interface>> {
    +findByStudentAndCourseEdition (studentID: StudentID, \ncourseEditionID: CourseEditionID) : Optional <CourseEditionEnrolment>
    +save(entity: CourseEditionEnrolment): CourseEditionEnrolment
    +findAll(): Iterable<CourseEditionEnrolment>
}

class CourseEditionEnrolmentRepositoryImpl <<Memory>>{
    +findByStudentAndCourseEdition (studentID: StudentID,\n courseEditionID: CourseEditionID) : Optional <CourseEditionEnrolment>
    +save(entity: CourseEditionEnrolment): CourseEditionEnrolment
    +findAll(): Iterable<CourseEditionEnrolment>
}

class CourseEditionEnrolmentRepositorySpringDataImpl <<SpringData>> {
    +findByStudentAndCourseEdition (studentID: StudentID,\n courseEditionID: CourseEditionID) : Optional <CourseEditionEnrolment>
    +save(entity: CourseEditionEnrolment): CourseEditionEnrolment
    +findAll(): Iterable<CourseEditionEnrolment>
}

interface ICourseEditionEnrolment\nRepositorySpringData <<Interface>> {
}

interface IProgrammeEditionEnrolmentRepository <<Interface>> {
    +findByStudentAndProgrammeEdition(studentID: StudentID, \nprogrammeEditionID: ProgrammeEditionID): \nOptional<ProgrammeEditionEnrolment>
    +save(entity: ProgrammeEditionEnrolment): ProgrammeEditionEnrolment
}

class ProgrammeEditionEnrolmentRepositoryImpl <<Memory>> {
    +findByStudentAndProgrammeEdition(studentID: StudentID, \nprogrammeEditionID: ProgrammeEditionID): \nOptional<ProgrammeEditionEnrolment>
    +save(entity: ProgrammeEditionEnrolment): ProgrammeEditionEnrolment
}

class ProgrammeEditionEnrolmentRepositorySpringDataImpl <<SpringData>> {
    +findByStudentAndProgrammeEdition(studentID: StudentID, \nprogrammeEditionID: ProgrammeEditionID):\n Optional<ProgrammeEditionEnrolment>
    +save(entity: ProgrammeEditionEnrolment): ProgrammeEditionEnrolment
}

interface IProgrammeEditionEnrolment\nRepositorySpringData <<Interface>> {
}

}



' ========== MAPPING LAYER ==========
package Mapper {
interface ICourseEditionEnrolmentMapper <<Interface>> {
    +toDataModel(courseEditionEnrolment: CourseEditionEnrolment): \nCourseEditionEnrolmentDataModel
    +toDomain(courseEditionEnrolmentDataModel: \nCourseEditionEnrolmentDataModel): CourseEditionEnrolment
}

class CourseEditionEnrolmentMapperImpl {
    -courseEditionEnrolmentFactory: ICourseEditionEnrolmentFactory
    +toDataModel(courseEditionEnrolment: CourseEditionEnrolment): \nCourseEditionEnrolmentDataModel
    +toDomain(courseEditionEnrolmentDataModel: \nCourseEditionEnrolmentDataModel): CourseEditionEnrolment
}

interface ICourseEditionEnrolmentIDMapper <<Interface>> {
    + toDataModel(id: CourseEditionEnrolmentID): \nCourseEditionEnrolmentIDDataModel
    + toDomain(idDataModel: CourseEditionEnrolmentIDDataModel): \nCourseEditionEnrolmentID
}

class CourseEditionEnrolmentIDMapperImpl {
    -studentIDMapper: IStudentIDMapper
    -courseEditionIDMapper: ICourseEditionIDMapper
    + toDataModel(id: CourseEditionEnrolmentID): \nCourseEditionEnrolmentIDDataModel
    + toDomain(idDataModel: CourseEditionEnrolmentIDDataModel): \nCourseEditionEnrolmentID
}

interface IProgrammeEditionEnrolmentMapper {
    + toDataModel(programmeEditionEnrolment:\n ProgrammeEditionEnrolment): ProgrammeEditionEnrolmentDataModel
    + toDomain(programmeEditionEnrolmentDataModel:\n ProgrammeEditionEnrolmentDataModel): ProgrammeEditionEnrolment
}

class ProgrammeEditionEnrolmentMapperImpl  {
    -programmeEditionEnrolmentFactory: IProgrammeEditionEnrolmentFactory
    + toDataModel(programmeEditionEnrolment:\n ProgrammeEditionEnrolment): ProgrammeEditionEnrolmentDataModel
    + toDomain(programmeEditionEnrolmentDataModel:\n ProgrammeEditionEnrolmentDataModel): ProgrammeEditionEnrolment
}

interface IProgrammeEditionEnrolmentIDMapper <<Interface>> {
    + toDataModel(id: ProgrammeEditionEnrolmentID): \nProgrammeEditionEnrolmentIDDataModel
    + toDomain(idDataModel: ProgrammeEditionEnrolmentIDDataModel): \nProgrammeEditionEnrolmentID
}

class ProgrammeEditionEnrolmentIDMapperImpl {
    -studentIDMapper: IStudentIDMapper
    -programmeEditionIDMapper: IProgrammeEditionIDMapper
    + toDataModel(id: ProgrammeEditionEnrolmentID): \nProgrammeEditionEnrolmentIDDataModel
    + toDomain(idDataModel: ProgrammeEditionEnrolmentIDDataModel): \nProgrammeEditionEnrolmentID
}
}


' ========== DATA MODEL ==========
package "Data Model" {
class CourseEditionEnrolmentDataModel {
    -enrolmentDate: localDate
    -isActive: boolean
}

class CourseEditionEnrolmentIDDataModel  {
    - studentID: int
    - courseEditionID: int
}

class ProgrammeEditionEnrolmentDataModel {
    -enrolmentDate: LocalDate
    -isActive: boolean
}

class ProgrammeEditionEnrolmentIDDataModel {
    -studentID: int
    -programmeEditionID: int
}

}


' ========== DOMAIN: ENROLMENT STATUS ==========
class EnrolmentStatus <<Value Object>>{
    -_isActive: boolean
    + EnrolmentStatus(isActive: boolean)
    + isEnrolmentActive(): boolean
    }

' ========== DOMAIN: COURSE ENROLMENT AGGREGATE ==========
package "CourseEditionEnrolment Aggregate" #LightYellow{
class CourseEditionEnrolment <<Root>> <<Entity>>{
    -enrolmentDate: Date <<VO>>
    +CourseEditionEnrolment(studentID: StudentID, \ncourseEditionID: CourseEditionID)
    +knowStudent(): StudentID
    +knowCourseEdition(): CourseEditionID
    +hasStudent(): boolean
    +isEnrolmentActive(): boolean
    +deactivateEnrolment(): void
}
}

class CourseEditionEnrolmentID <<Value Object>> {
    -studentID: StudentID
    -courseEditionID: CourseEditionID
    + CourseEditionEnrolmentID\n(id : int)
    + equals(object: Object) : boolean
}




' ========== DOMAIN: PROGRAMME ENROLMENT AGGREGATE ==========
package "ProgrammeEditionEnrolment Aggregate" #LightYellow{
class ProgrammeEditionEnrolment <<Root>> <<Entity>>{
    -enrolmentDate: Date <<VO>>
    +ProgrammeEditionEnrolment(studentID: StudentID, \nprogrammeEditionID: ProgrammeEditionID)
    +deactivateEnrolment(): void
    +hasSameStudent(): boolean
    +hasSameProgrammeEdition(): boolean

}
}

class ProgrammeEditionEnrolmentID <<Value Object>> {
    -studentID: StudentID
    -programmeEditionID: ProgrammeEditionID
    + ProgrammeEditionEnrolmentID\n(id : int)
    + equals(object: Object) : boolean
}

' ========== RELATIONSHIPS ==========
US28_EnrolmentRemovalController ..> ICourseEditionEnrolmentService
ICourseEditionEnrolmentService <|.. CourseEditionEnrolmentServiceImpl

CourseEditionEnrolmentServiceImpl ..> ICourseEditionEnrolmentRepository
CourseEditionEnrolmentServiceImpl ..> IProgrammeEditionEnrolmentRepository

ICourseEditionEnrolmentRepository <|.. CourseEditionEnrolmentRepositoryImpl
ICourseEditionEnrolmentRepository <|.. CourseEditionEnrolmentRepositorySpringDataImpl
CourseEditionEnrolmentRepositorySpringDataImpl ..> CourseEditionEnrolmentDataModel
CourseEditionEnrolmentRepositorySpringDataImpl "1" ..> "*" CourseEditionEnrolment
CourseEditionEnrolmentRepositorySpringDataImpl ..> ICourseEditionEnrolmentMapper
CourseEditionEnrolmentRepositorySpringDataImpl ..> ICourseEditionEnrolmentIDMapper
CourseEditionEnrolmentMapperImpl ..> CourseEditionEnrolment : maps to
CourseEditionEnrolmentMapperImpl ..> CourseEditionEnrolmentDataModel : maps to
CourseEditionEnrolmentMapperImpl ..|> ICourseEditionEnrolmentMapper
CourseEditionEnrolmentIDMapperImpl ..|> ICourseEditionEnrolmentIDMapper
CourseEditionEnrolmentMapperImpl ..> ICourseEditionEnrolmentIDMapper
CourseEditionEnrolmentIDMapperImpl ..> CourseEditionEnrolmentID : maps to
CourseEditionEnrolmentIDMapperImpl ..> CourseEditionEnrolmentIDDataModel : maps to

ProgrammeEditionEnrolmentRepositorySpringDataImpl ..> IProgrammeEditionEnrolmentMapper
ProgrammeEditionEnrolmentRepositorySpringDataImpl ..> IProgrammeEditionEnrolmentIDMapper
ProgrammeEditionEnrolmentMapperImpl ..> ProgrammeEditionEnrolment : maps to
ProgrammeEditionEnrolmentMapperImpl ..> ProgrammeEditionEnrolmentDataModel : maps to
ProgrammeEditionEnrolmentMapperImpl ..|> IProgrammeEditionEnrolmentMapper
ProgrammeEditionEnrolmentIDMapperImpl ..|> IProgrammeEditionEnrolmentIDMapper
ProgrammeEditionEnrolmentMapperImpl ..> IProgrammeEditionEnrolmentIDMapper
ProgrammeEditionEnrolmentIDMapperImpl ..> ProgrammeEditionEnrolmentID : maps to
ProgrammeEditionEnrolmentIDMapperImpl ..> ProgrammeEditionEnrolmentIDDataModel : maps to

CourseEditionEnrolmentDataModel "1" --> "1" CourseEditionEnrolmentIDDataModel
ProgrammeEditionEnrolmentDataModel "1" --> "1" ProgrammeEditionEnrolmentIDDataModel
CourseEditionEnrolmentRepositorySpringDataImpl ..|> ICourseEditionEnrolment\nRepositorySpringData
IProgrammeEditionEnrolmentRepository <|.. ProgrammeEditionEnrolmentRepositoryImpl
IProgrammeEditionEnrolmentRepository <|.. ProgrammeEditionEnrolmentRepositorySpringDataImpl

IProgrammeEditionEnrolment\nRepositorySpringData <|.. ProgrammeEditionEnrolmentRepositorySpringDataImpl
ProgrammeEditionEnrolmentRepositorySpringDataImpl ..> ProgrammeEditionEnrolment

CourseEditionEnrolmentID "_courseEditionEnrolmentID 1" <-- "1" CourseEditionEnrolment
ProgrammeEditionEnrolmentID "_programmeEditionEnrolmentID 1" <-- "1" ProgrammeEditionEnrolment
CourseEditionEnrolmentRepositoryImpl "1"..> "_courseEditionEnrolments *" CourseEditionEnrolment
EnrolmentStatus "_isActive 1" <-- "1" CourseEditionEnrolment
EnrolmentStatus "_isActive 1" <-- "1" ProgrammeEditionEnrolment



@enduml
