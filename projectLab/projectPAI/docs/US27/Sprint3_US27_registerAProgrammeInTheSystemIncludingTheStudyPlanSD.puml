@startuml
autonumber

title US27: As an ASC, I want to register a programme in the system, including the study plan.

actor ASC as Admin

participant ":UI" as UI #lightblue
participant ":ControllerUS27" as C #lightblue
participant ":ProgrammeRepository" as PR #lightblue
participant ":ProgrammeFactory" as PF #lightblue



Admin -> UI ++ #application : I want to register a Programme in the System,\n including a Study Plan.

UI --> Admin -- : What are the attributes??

Admin -> UI ++ #application : name, acronym, quantityOfEcts, quantityOfSemesters, degreeType, \n department, programmeDirector

UI -> C ++ #application : registerProgrammeInTheSystemIncludingStudyPlan(name, acronym, quantityOfEcts, quantityOfSemesters, \ndegreeType, department, programmeDirector, programmeCourseListFactoryImpl1, courseInStudyPlanFactory, \nstudyPlanListFactory, studyPlanFactory, courseFactory)

C -> PR ++ #application : registerProgramme(name, acronym, quantityOfEcts, quantityOfSemesters, degreeType, department, \nprogrammeDirector, programmeCourseListFactoryImpl1, courseInStudyPlanFactory, \nstudyPlanListFactory, studyPlanFactory, courseFactory)


PR -> PF ++ #application : registerProgramme(name, acronym, quantityOfEcts, quantityOfSemesters, degreeType, \ndepartment, programmeDirector, programmeCourseListFactoryImpl, courseInStudyPlanFactory, \nstudyPlanListFactory, studyPlanFactory, courseFactory)
create "P1:Programme" as P #lightblue
PF -> P ++ #application : Programme(name, acronym, quantityOfEcts, quantityOfSemesters, degreeType, \ndepartment, programmeDirector, programmeCourseListFactoryImpl, courseInStudyPlanFactory, \nStudyPlanListFactory studyPlanListFactory, StudyPlanFactory studyPlanFactory, CourseFactory courseFactory)

P -> P : isNameInvalid()
P -> P : isAcronymInvalid()
P -> P : isQuantityOfEctsInvalid()
P -> P : isQuantityOfSemestersInvalid()
participant ":StudyPlanFactory" as SPF #lightblue
P -> SPF ++ #application : newStudyPlan(courseInStudyPlanFactory, \nstudyPlanListFactory, courseFactory)
create "SP1:StudyPlan" as SP #lightblue

SPF -> SP ++ #application : StudyPlan()

participant ":StudyPlanListFactory" as SPLF #lightblue
SP -> SPLF ++ #application: newArrayList()

create "LCSP1:List<CourseInStudyPlan>" as LCSP #lightblue
SPLF -> LCSP ++ #application : newArrayList()
LCSP --> SPLF -- : List<CourseInStudyPlan> LCSP1
participant ":CourseInStudyPlanFactory" as CSPF #lightblue
SPLF --> SP -- : List<CourseInStudyPlan> LCSP1
SP --> SPF -- : List<CourseInStudyPlan> SP1

SPF --> P -- : List<CourseInStudyPlan> SP1

P --> PF -- : Programme P1
PF --> PR -- : Programme P1
PR -> PR : contains(P1)
PR -> PR : add(P1)

PR --> C -- : True
C --> UI -- : True
UI --> Admin -- : Success!

ref over Admin
US03_AddCourseToAProgramme.


end ref

Admin -> UI ++ #application : I want to add a Course to StudyPlan
UI --> Admin -- : programme? course? semester? curricularYear?
Admin -> UI ++ #application : semester! curricularYear! course! P1!
UI -> C ++ #application : addCourseToStudyPlan(semester, curricularYear, course, P1)
C -> P ++ #application : getStudyPlan()
P -> SP ++ #application: addCourseToStudyPlan(semester, curricularYear, course, P1)
SP -> SP : isCourseOrProgrammeInvalid(course, p1)
SP -> SP : isCourseInStudyPlan(course)


SP -> CSPF ++ #application : newCourseInStudyPlan(semester, curricularYear, course, programme)
create ":CourseInStudyPlan" as CSP #lightblue
CSPF -> CSP ++ #application : CourseInStudyPlan(semester, curricularYear, course, programme)
CSP -> CSP : isSemesterInvalid
CSP -> CSP : IsCurricularYearInvalid

CSP --> CSPF -- : CSP1
CSPF --> SP --: CSP1

SP -> SP : IsECTSLimitExceeded(semester, curricularYear, CSP1)
SP -> LCSP ++ #application: add(CSP1)
LCSP --> SP --: true
SP --> P --: true
P --> C -- : true
C --> UI -- : True

UI --> Admin -- : Success
@enduml