@startuml
!pragma layout smetana

class US11_RegisterAProgrammeInTheSystem {
    -_programmeRepository: ProgrammeRepository
    +US11_RegisterProgrammeInTheSystem(ProgrammeRepository programmeRepo)
    +registerProgrammeInTheSystem(String name, String acronym, int quantityOfEcts, int quantityOfSemesters, \nDegreeType degreeType, Department department, Teacher programmeDirector, ProgrammeCourseListFactoryImpl programmeCourseListFactoryImpl1, \nCourseInStudyPlanFactory courseInStudyPlanFactory, StudyPlanListFactory studyPlanListFactory, StudyPlanFactory studyPlanFactory, CourseFactory CourseFactory): boolean
}

class "List<Programme>" {}

class DepartmentID <<ValueObject>> {}

class Acronym <<ValueObject>> {
    -Acronym: String
}

class Name <<ValueObject>> {
    -Name: String
}

class ProgrammeID <<ValueObject>> {}

class quantityOfEcts <<ValueObject>> {
    -quantityOfEcts: int
    +isQuantityOfEctsInvalid(int quantityOfEcts)
    +getquantityOfEcts()
}

class quantityOfSemesters <<ValueObject>> {
    -quantityOfSemesters: int
    + isQuantityOfSemestersInvalid(int quantityOfSemesters)
    +getQuantityOfSemester()
}

package "Programme Aggregate" {
    class "<<root>>\nProgramme" {
        + equals(o: Object): boolean
        + isEquals(programme: Programme): boolean
        + isInDepartment(department: Department): boolean
        + calculateNumberOfYears(quantityOfSemesters: int): int
        + hasThisProgrammeName(name: String): boolean
   }
}

class ProgrammeRepository {
     -_programmeFactory: ProgrammeFactory
     -_programmeRepository: List<Programme>
     -_programmeRepositoryListFactory: ProgrammeRepositoryListFactory
     +ProgrammeRepository(programmeFactory: ProgrammeFactory)
     +registerProgramme(name: String, acronym: String, quantityOfEcts: int, quantityOfSemesters: int, \ndegreeType: DegreeType; department : Department,programmeDirector: Teacher): boolean
}

interface IProgrammeRepository {
}

interface IProgrammeRepositoryListFactory {
    +newProgrammeArrayList(): ArrayList<Programme>
    +copyProgrammeArrayList(): List<Programme>
}

class ProgrammeRepositoryListFactoryImpl {
    +newProgrammeArrayList: ArrayList<Programme>
}

interface IProgrammeFactory {
    +registerProgramme(name: String, acronym: String, quantityOfEcts: int, quantityOfSemesters: int, \ndegreeType: DegreeType, department: Department, programmeDirector: Teacher)
}

class ProgrammeFactoryImpl {
    +registerProgramme(name: String, acronym: String, quantityOfEcts: int, quantityOfSemesters: int, \ndegreeType: DegreeType, department: Department, programmeDirector: Teacher)
}

class DegreeTypeID <<ValueObject>> {}

class TeacherID <<ValueObject>> {}

US11_RegisterAProgrammeInTheSystem ..> IProgrammeRepository

IProgrammeRepository <|.. ProgrammeRepository
IProgrammeRepository ..> IProgrammeRepositoryListFactory
IProgrammeRepositoryListFactory <|.. ProgrammeRepositoryListFactoryImpl
IProgrammeRepositoryListFactory ..> "List<Programme>" : "<<creates>>"
IProgrammeRepository --> "List<Programme>"
IProgrammeRepository ..> IProgrammeFactory
IProgrammeFactory <|.. ProgrammeFactoryImpl
IProgrammeFactory ..> "<<root>>\nProgramme" : "<<creates>>"
"List<Programme>" --> "<<root>>\nProgramme"
"<<root>>\nProgramme" "*" --> "1" TeacherID : "is directed"
"<<root>>\nProgramme" "*" --> "1" DepartmentID : "belongs to"
"<<root>>\nProgramme" "*" --> "1" DegreeTypeID : "has"
"<<root>>\nProgramme" "*" --> "1" quantityOfEcts : "has"
"<<root>>\nProgramme" "*" --> "1" Acronym : "has"
"<<root>>\nProgramme" "*" --> "1" Name : "has"
"<<root>>\nProgramme" "*" <-- "1" ProgrammeID : "has"
"<<root>>\nProgramme" "*" --> "1" quantityOfSemesters : "has"

@enduml