@startuml

!pragma layout smetana
skinparam sequenceMessageAlign center
title US08: I want to register a Student in the system


class US08_IWantToRegisterAStudentInTheSystemController {
    + registerStudent(studentID : StudentID, name : Name, NIF : NIF, phone : PhoneNumber, email : Email, address : Address) : boolean
}

class StudentRepositoryJPA {

    + save(student : Student) : Student
    + findAll() : Iterable<Student>
    + ofIdentity(studentID : StudentID) : Optional<Student>
    + containsOfIdentity(studentID : StudentID) : boolean
    + existsByStudentIDOrNIF (studentID : StudentID, nif : NIF) : boolean
}

package "Student Aggregate" {
    class Student <<Root>> <<Entity>> {
        + identity() : StudentID
        + sameAs (object : Object) : boolean
        + equals(object : Object) : boolean
        + isEquals(student : Student) : boolean
        + getNIF () : NIF
        + getStudentPhoneNumber () : PhoneNumber
        + getStudentEmail () : Email
        + getStudentAcademicEmail () : StudentAcademicEmail
        + getStudentAddress () : StudentAddress
        + getStudentName () : StudentName
    }
}

class Address <<Root>> <<Value Object>> {
    + isAttributeValid(attribute : Object)
}

class StudentID <<Value Object>> {
    -_uniqueNumber : int
    + StudentID(uniqueNumber : int)
    + isUniqueNumberValid(uniqueNumber)
    + getUniqueNumber()
    + equals() : boolean
    + getUniqueNumber() : int
    + isEquals(studentID : StudentID) : boolean
}

class Name <<Value Object>> {
    -_name : String
    + Name(name : String)
    + isNameValid(name)
    + getName()
}

class NIF <<Value Object>> {
    -_NIF : String
    + NIF(NIF : String)
    + equals(nif : String)
    + isNIFInvalid(NIF)
    + getNIFNumber()
}

class PhoneNumber <<Value Object>> {
    -_countryCode : String
    -_number : String
    + PhoneNumber(phone : String)
    + areParametersInvalid(parameter : String)
    + isCountryCodeInvalid(countryCode : String)
    + getStudentPhoneNumber () : PhoneNumber
}

class Email <<Value Object>> {
    -_email : String
    + Email(email : String)
    + isEmailInvalid(email : String)
    + getStudentEmail () : Email
}

class InstitutionalEmail <<Value Object>> {
    -_emailDomain : String
    -_studentEmail : String
    + InstitutionalEmail(institutionalEmail : String)
    + getStudentEmail()
    + equals(o : object)
    + hashCode()
    + toString()
}

class Street <<Value Object>> {
    -_street : String
    + Street(street : String)
}

class PostalCode <<Value Object>> {
    -_postalCode : String
    + PostalCode(postalCode : String)
}

class Location <<Value Object>> {
    -_location : String
    + Location(location : String)
    + getLocation()
}

class Country <<Value Object>> {
    -_country : String
    + Country(country : String)
    + isCountryInvalid(country : String)
    + equals(object : Object)
    + getCountry()
}

interface IStudentFactory <<Interface>> {
    + newStudent(StudentID : StudentID, name : Name, NIF : Name, phone : PhoneNumber, email : Email, street : Street, address : AddressVO) : Student
    + createAddress(street : Street, postalCode : PostalCode, location : Location, country : Country) : AddressVO
}

class StudentFactoryImpl {
    + newStudent(studentID : StudentID, name : Name, NIF : NIF, phone : PhoneNumber, email : Email, address : AddressVO) : Student
    + createAddress(street : Street, postalCode : PostalCode, location : Location, country : Country) : AddressVO
}


interface IStudentRepository <<Interface>> {
    + save(student : Student)
    + findAll()
    + ofIdentity(studentID : StudentID)
    + containsOfIdentity(studentID : StudentID)
    + existsByStudentIDOrNIF(studentID : studentID, nif : NIF)
}

interface IRepository <<Interface>> {
    + save(object : Object)
    + findAll()
    + ofIdentity(object : Object)
    + containsOfIdentity(object : Object)
}

class StudentService {
    + registerStudent(studentID : StudentID, name : Name, NIF : NIF, phone : PhoneNumber, email : Email, street : Street, postalCode : PostalCode, location : Location, country : Country,
                      institutionalEmail : InstitutionalEmail) : Student
}

class StudentMapper {
    + domainToDataModel(student : Student) : StudentDataModel
    + dataModelToDomain(studentDataModel : StudentDataModel) : Student
}

class StudentDataModel {
    - studentID : int
    - name : String
    - nif : DataModel
    - phone : DataModel
    - email : String
    - institutionalEmail : DataModel
    - address : DataModel
}

interface IStudentRepositorySpringData{
  + save(student : Student) : Student
  + findAll() : Iterable<Student>
  + ofIdentity(studentID : StudentID) : Optional<Student>
  + containsOfIdentity(studentID : StudentID) : boolean
  + existsByStudentIDOrNIF (studentID : StudentID, nif : NIF) : boolean
}

interface IStudentService {
+ registerStudent(studentID : StudentID, name : Name, NIF : NIF, phone : PhoneNumber, email : Email, street : Street, postalCode : PostalCode, location : Location, country : Country,
                      institutionalEmail : InstitutionalEmail) : Student

}

interface IStudentMapper {
+ domainToDataModel(student : Student) : StudentDataModel
+ dataModelToDomain(studentDataModel : StudentDataModel) : Student
}


IStudentRepositorySpringData <|.. StudentRepositoryJPA
US08_IWantToRegisterAStudentInTheSystemController "1" ..> "1" IStudentService
IStudentService <|.. StudentService
StudentService "1" ..> "1" IStudentFactory
StudentService "1" ..> "1" IStudentRepository
StudentRepositoryJPA "1" ..> "1" IStudentMapper
IStudentMapper <|.. StudentMapper

StudentMapper --> StudentDataModel


StudentRepositoryJPA "1" ---> "_students\n*" Student

StudentFactoryImpl ..> StudentRepositoryJPA
Student "1" --> "1" Address
StudentFactoryImpl "*" ..|> "1     " IStudentFactory
IStudentFactory "1" ..> "1" Student: <<create>>
StudentRepositoryJPA ...|> IStudentRepository
IStudentRepository ..|> IRepository
Student "*" ----> "_studentID \n 1" StudentID
Student "*" ----> "_name \n 1" Name
Student "\n *" ----> "_email \n 1  " Email
Student "\n *" ----> "_institutionalEmail \n                1" InstitutionalEmail
Student "\n *" ----> "_phone \n 1" PhoneNumber
Student "\n *" ----> "_nif \n 1 " NIF
Address "\n *" ----> "_street \n 1" Street
Address "\n *" ----> "_postalCode \n 1" PostalCode
Address "\n *" ----> "_location \n 1" Location
Address "\n *" ----> "_country \n 1" Country
NIF "1" ----> "_country \n 1" Country

@enduml