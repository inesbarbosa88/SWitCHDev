@startuml
title US05: Register a Department in the System

skinparam shadowing true
skinparam linetype ortho

class US05_RegisterADepartmentController #lightcyan {
    +US05_RegisterADepartmentController(departmentService: IDepartmentService)
    +registerDepartment(acronym: DepartmentAcronym, name: Name): boolean
}

interface IDepartmentService #lightcyan {
        + registerDepartment(acronym: DepartmentAcronym, name: Name)
}

class DepartmentServiceImpl #ffe6ec{
      + DepartmentService(departmentFactory: IDepartmentFactory, departmentRepo: IDepartmentRepository)
      + registerDepartment(acronym: DepartmentAcronym, name: Name)
}

interface IDepartmentRepository #lightyellow {
    + registerDepartment(acronym: DepartmentAcronym, name: Name): boolean
}

class DepartmentRepositoryMem #lightcyan {
    + save (entity: Department): Department
    + findAll(): Iterable<Department>
    + ofIdentity (id: DepartmentID): Optional<Department>
    + containsOfIdentity(id: DepartmentID): boolean
}

class DepartmentFactoryImpl #lightyellow {
    +newDepartment(acronym: DepartmentAcronym, name: Name): Department
}

interface IDepartmentFactory #lightyellow {
    +newDepartment(acronym: DepartmentAcronym, name: Name): Department
}

class DepartmentListFactoryImpl #lightyellow {
    +newDepartmentList: HashSet<Department>
}

interface IDepartmentListFactory #lightyellow {
    + newDepartmentList(): HashSet<Department>
}

interface Set #ccffcc {
    +add(): boolean
}

package "Department Aggregate" {

class Department <<root>> #lightyellow{
    +Department(acronym: DepartmentAcronym , name: Name)
    +hashCode(): int
    +identity(): DepartmentAcronym
    +equals(obj: Object): boolean
    +sameAs(obj: Object): boolean
    +getName(): Name
    +getAcronym(): DepartmentAcronym
    +getVersion(): Long
}
}

class Name <<Value Object >> #lightyellow {
    -_name: String
    + Name(name: String)
    + getName(): String
}

class DepartmentAcronym <<Value Object>> #lightyellow {
    -_acronym: String
    + DepartmentAcronym(acronym: String)
    + getAcronym(): String
    + equals(obj: Object): boolean
    + hashCode(): int
}

class DepartmentID <<Value Object>> #lightyellow {
    + DepartmentID(acronym: DepartmentAcronym)
    + getAcronym(): DepartmentAcronym
    + equals(obj: Object): boolean
    + hashCode(): int
}


US05_RegisterADepartmentController "*" ..> "_departmentService 1" IDepartmentService

IDepartmentService <|.. DepartmentServiceImpl
DepartmentServiceImpl "1" ..> "_departmentFactory 1" IDepartmentFactory
DepartmentServiceImpl "1"..> "_departmentRepo 1" IDepartmentRepository
IDepartmentService ..> Department

DepartmentRepositoryMem "1" ..> "*" Department
DepartmentRepositoryMem "1" -> "_departments   1" Set
DepartmentRepositoryMem "1" ..> "_departmentsList 1" IDepartmentListFactory
IDepartmentRepository <|.. DepartmentRepositoryMem

IDepartmentListFactory  <|..  DepartmentListFactoryImpl
IDepartmentListFactory  ..>  Set
IDepartmentFactory  <|..  DepartmentFactoryImpl

Department "1" <- "1" Set
Department "1" <.. "1" IDepartmentFactory
Name "_departmentName 1" <-- "1" Department
Department "1" --> "1 _departmentId" DepartmentID
DepartmentID "1" --> "1 _departmentAcronym" DepartmentAcronym
Department "1" ..> "1" DepartmentAcronym


'JPA
package "JPA Department Aggregate" {

class DepartmentDataModel #lightcyan {
    - acronym: String
    - name: String
    - version: Long
    + DepartmentDataModel()
    + DepartmentDataModel(acronym: String, name: String, directorID: String, version: Long)
    + getAcronym(): String
    + setAcronym(acronym: String): void
    + getName(): String
    + setName(name: String): void
    + getVersion(): Long
    + setVersion(version: Long): void
}
}

interface IDepartmentRepositorySpringData #ccffcc{

}

class DepartmentRepositorySpringData #lightcyan {
   + DepartmentRepositorySpringData(repositorySpringData: IDepartmentRepositorySpringData, mapper: DepartmentMapperImpl) {
   + save (entity: Department): Department
   + findAll(): Iterable<Department>
   + ofIdentity (id: DepartmentID): Optional<Department>
   + containsOfIdentity(id: DepartmentID): boolean
}

class DepartmentMapperImpl #lightcyan {
    + toDomain(dataModel: DepartmentDataModel): Department
    + toDataModel(domain: Department): DepartmentDataModel
}

interface IDepartmentMapper  #lightcyan {
     + toDomain(dataModel: DepartmentDataModel): Department
     + toDataModel(domain: Department): DepartmentDataModel

}

class DepartmentIDDataModel #lightcyan {
    - departmentID: String
    + DepartmentIDDataModel()
    + DepartmentIDDataModel(departmentID: String)
    + getDepartmentID(): String
    + equals(obj: Object): boolean
    + hashcode(): int
}

class DepartmentIDMapperImpl #lightcyan {
      + toDataModel(departmentID: DepartmentID): DepartmentIDDataModel
      + toDomainModel(departmentIDDataModel: DepartmentIDDataModel): DepartmentID
}

interface IDepartmentIDMapper #lightcyan {
    + toDataModel(departmentID: DepartmentID): DepartmentIDDataModel
    + toDomainModel(departmentIDDataModel: DepartmentIDDataModel): DepartmentID
}

DepartmentRepositorySpringData "1" ..> "1" DepartmentDataModel
DepartmentRepositorySpringData "1" ..> "*" Department
DepartmentRepositorySpringData "1" --> "_repositorySpringData 1" IDepartmentRepositorySpringData
DepartmentRepositorySpringData ..|>  IDepartmentRepository
DepartmentRepositorySpringData "1" --> "1 _mapper" DepartmentMapperImpl

DepartmentMapperImpl "1" ..> "1 _departmentFactory" IDepartmentFactory
DepartmentMapperImpl "1" ..> "*" Department
DepartmentMapperImpl "1" ..> "*" DepartmentDataModel
DepartmentMapperImpl  ..|>  IDepartmentMapper

DepartmentIDMapperImpl ..|> IDepartmentIDMapper
DepartmentIDMapperImpl "1" ..> "*" DepartmentIDDataModel
DepartmentIDMapperImpl "1" ..> "*" Department


note as n1 #F5F5F5
  This diagram illustrates the Clean Architecture structure, organized into four concentric layers, by colours:

  - Frameworks & Drivers (green): External interfaces.
  - Interface Adapters (cyan): Components responsible for transforming data between the external world and the application's internal structure.
  - Application Services (pink): Orchestrates the execution of use cases, containing application-specific business rules.
  - Domain (yellow): Encapsulates the core business logic and entities, remaining independent of external concerns and frameworks.
end note




@enduml