@startuml
skinparam sequenceMessageAlign center
autonumber

actor HRC
participant ":UI" as UI
participant "ctrl:UpdateTeacherWorkingPercentageController" as Controller #lightgreen
participant "teacherRepo:TeacherRepository" as TRepo
participant "teacherList: List<Teacher>" #lightyellow
participant "teacher[i]: Teacher" as teacher #lightpink
participant "teacherAcronymVO1:TeacherAcronymVO" as teacherAcronymVO1
participant "teacherIdVO1:TeacherIdVO" as teacherIdVO1
participant "dateVO1:DateVO" as dateVO1
participant "workingPercentageVO1:WorkingPercentageVO" as wpVO1
participant "tcpRepo: TeacherCareerProgressionRepository" as TCPRepo #lightblue
participant "tcpLList: List<TeacherCareerProgression>" #lightyellow
participant "lastTCP:TeacherCareerProgression" as TCP #lightpink
participant "tcpF:ITCPfactory" as TCPf #burlywood
participant "tcp1:TeacherCareerProgression" as TCP1

HRC -> UI : I want to update Teacher's working percentage
activate HRC
activate UI
UI -> Controller : findAll()
activate Controller
Controller -> TRepo : findAll()
activate TRepo
TRepo --> Controller : teachersList
deactivate TRepo
Controller --> UI : teachersList
deactivate Controller
UI --> HRC : Which Teacher?
deactivate UI
HRC -> UI: Teacher's acronym
activate UI
UI --> HRC: What working percentage?
deactivate UI
HRC -> UI: Working percentage
activate UI
UI --> HRC: What date?
deactivate UI
HRC -> UI: Date
activate UI
UI -> Controller : updateTeacherWorkingPercentage \n (teacherAcronym, date, workingPercentage)
activate Controller

Controller -> teacherAcronymVO1** : createTeacherAcronymVO(teacherAcronym)
activate teacherAcronymVO1
teacherAcronymVO1 -> teacherAcronymVO1 : validate teacher acronym
teacherAcronymVO1 --> Controller : teacherAcronymVO1
deactivate teacherAcronymVO1
Controller -> teacherIdVO1** : createTeacherIdVO(teacherAcronymVO1)
activate teacherIdVO1
teacherIdVO1 -> teacherIdVO1 : validate teacher acronym VO
teacherIdVO1 --> Controller : teacherIdVO1
deactivate teacherIdVO1

Controller -> dateVO1** : createDateVO(date)
activate dateVO1
dateVO1 -> dateVO1 : validate and format date
dateVO1 --> Controller : dateVO1
deactivate dateVO1

Controller -> wpVO1** : createWorkingPercentageVO(workingPercentage)
activate wpVO1
wpVO1 -> wpVO1 : isWorkingPercentageValid(workingPercentage)
wpVO1 --> Controller : workingPercentageVO1
deactivate wpVO1

Controller -> TRepo : containsOfIdentity(teacherIdVO1)
activate TRepo
loop
    TRepo -> teacher : teacher.identity().equals(teacherIdVO1)
    activate teacher
    teacher --> TRepo : true
    deactivate teacher
end
TRepo --> Controller : true
deactivate TRepo


Controller -> TCPRepo : updateWorkingPercentageInTeacherCareerProgression \n(dateVO1, workingPercentageVO1, teacherIdVO1)
activate TCPRepo

TCPRepo -> TCPRepo : optionalTCP = findLastTCPFromTeacherID(teacherIdVO1)
TCPRepo -> TCPRepo : lastTCP = optionalTCP.get()
TCPRepo -> TCP : lastTCP.isLastDateEqualOrBeforeNewDate(dateVO1)
activate TCP
TCP --> TCPRepo: true
deactivate TCP
TCPRepo -> TCP : lastTCP.getTeacherCategoryID()
activate TCP
TCP --> TCPRepo : teacherCategoryIdVO1
deactivate TCP
TCPRepo -> TCP : lastTCP.getWorkingPercentage()
activate TCP
TCP --> TCPRepo : lastWorkingPercentage
deactivate TCP
TCPRepo -> TCPRepo : validate if lastWorkingPercentage \nis different than workingPercentageVO1

TCPRepo -> TCPf : createTeacherCareerProgression \n(dateVO1, workingPercentageVO1, teacherCategoryIdVO1, teacherIdVO1)
activate TCPf
TCPf -> TCP1** : createTeacherCareerProgression \n(dateVO1, workingPercentageVO1, teacherCategoryIdVO1, teacherIdVO1)
activate TCP1
TCP1 --> TCPf : tcp1
deactivate TCP1
TCPf --> TCPRepo : tcp1
deactivate TCPf
TCPRepo -> TCPRepo : isTeacherCareerProgressionDuplicated(tcp1)
TCPRepo -> TCPRepo: save(tcp1)
TCPRepo --> Controller : true
deactivate TCPRepo

Controller --> UI : true
deactivate Controller
UI --> HRC : Success
deactivate UI
deactivate HRC

@enduml