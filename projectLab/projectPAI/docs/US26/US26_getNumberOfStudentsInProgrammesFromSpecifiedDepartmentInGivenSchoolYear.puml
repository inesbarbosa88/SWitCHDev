@startuml

title US26: Get number of students enrolled in programmes from specified department in a given school year
autonumber
skinparam sequence {
   LifelineBorderColor LigthBlue
   LifelineBackgroundColor LightBlue
 }

actor "Department Director" as DepartmentDir #White
participant ":UI" as UI #LightBlue/White
participant ":CountStudentsInProgrammesFromDepartmentInSchoolYearController" as Controller #LightBlue/White
participant ":SchoolYearRepo" as SchoolYearRepo #LightBlue/White
participant ":DepartmentRepo" as DepartmentRepo #LightBlue/White
participant ":ProgrammeEditionEnrolmentRepo" as ProgrammeEditionEnrolRepo #LightBlue/White
participant "pee[i]:ProgrammeEditionEnrolment" as ProgrammeEditionEnrolment #LightBlue/White
participant ":Student" as Student #LightBlue/White
participant ":ProgrammeEdition" as ProgrammeEdition #LightBlue/White
participant ":SchoolYear" as SchoolYear #LightBlue/White
participant ":Programme" as Programme #LightBlue/White


activate DepartmentDir
DepartmentDir -> UI: I want to get number of students \n enrolled in programmes from my \n department in a given school year
activate UI
UI-->DepartmentDir: Which Department?
DepartmentDir ->UI: this Department.
UI --> DepartmentDir: Which SchoolYear?
DepartmentDir ->UI: this School Year.

UI-> Controller: countStudentsInProgrammesFromDepartmentInSchoolYear(d1,sy1)
activate Controller
Controller -> SchoolYearRepo: schoolYearExists(sy1)
activate SchoolYearRepo
SchoolYearRepo --> Controller: true
deactivate SchoolYearRepo
Controller -> DepartmentRepo: departmentExists(d1)
activate DepartmentRepo
DepartmentRepo-->Controller: true
deactivate DepartmentRepo
Controller -> ProgrammeEditionEnrolRepo: countStudentsInProgrammesFromDepartmentInSchoolYear(d1,sy1)
activate ProgrammeEditionEnrolRepo
create ":StudentUniqueNumbers" #LightBlue/White
ProgrammeEditionEnrolRepo -> ":StudentUniqueNumbers"** : new HashSet<>()
activate ":StudentUniqueNumbers"
loop for each ProgrammeEditionEnrolment[i] in ProgrammeEditionEnrolRepo
ProgrammeEditionEnrolRepo ->ProgrammeEditionEnrolment :isEnrolmentAssociatedToDepartmentAndSchoolYear(d1,sy1)
activate ProgrammeEditionEnrolment
ProgrammeEditionEnrolment -> ProgrammeEdition: isEditionAssociatedToDepartmentAndSchoolYear(d1,sy1)
activate ProgrammeEdition
ProgrammeEdition->SchoolYear: isSameSchoolYear(sy1)
activate SchoolYear
SchoolYear -->ProgrammeEdition: true
deactivate SchoolYear
ProgrammeEdition->Programme: isInDepartment(d1)
activate Programme
Programme-->ProgrammeEdition:true
deactivate Programme
ProgrammeEdition-->ProgrammeEditionEnrolment: true
deactivate ProgrammeEdition
ProgrammeEditionEnrolment-->ProgrammeEditionEnrolRepo: true
deactivate ProgrammeEditionEnrolment
alt isEnrolmentAssociatedToDepartmentAndSchoolYear
ProgrammeEditionEnrolRepo -> ProgrammeEditionEnrolment: getStudentUniqueNumber ()
activate ProgrammeEditionEnrolment
ProgrammeEditionEnrolment -> Student:getUniqueNumber
activate Student
Student -->ProgrammeEditionEnrolment: uniqueNumber
deactivate Student
ProgrammeEditionEnrolment --> ProgrammeEditionEnrolRepo: uniqueNumber
deactivate ProgrammeEditionEnrolment
ProgrammeEditionEnrolRepo -> ":StudentUniqueNumbers": add(uniqueNumber)
end
end
":StudentUniqueNumbers" --> ProgrammeEditionEnrolRepo: studentUniqueNumbers.size()
deactivate ":StudentUniqueNumbers"
ProgrammeEditionEnrolRepo-->Controller: studentUniqueNumbers.size()
deactivate ProgrammeEditionEnrolRepo
Controller --> UI:  studentUniqueNumbers.size()
deactivate Controller
UI-->DepartmentDir: studentUniqueNumbers.size()
deactivate DepartmentDir
deactivate UI


@enduml