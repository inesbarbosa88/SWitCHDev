@startuml
actor ACS
participant ":UI" as UI
participant ":ProgrammeController" as Controller
participant ":ProgrammeService" as Service
participant ":ITeacherRepository" as TR
participant ":IProgrammeRepository" as PR #lightgreen
participant ":Programme" as PG #yellow
participant ":Database" as DB #gray
participant ":DataModel" as DM #lightblue
autonumber

' Primeira interação: Solicitar lista de Programmes
ACS -> UI : Show list of Programmes
activate UI #application
UI -> Controller : getAllProgrammes()
activate Controller #application
Controller -> Service : getAllProgrammes()
activate Service #application
Service -> PR : getAllProgrammes()
activate PR #application
PR -> DB : fetchAllProgrammes()
activate DB #application
DB -> DM : toDataModel(Programmes)
activate DM #application
DM --> DB : DataModel<Programmes>
deactivate DM
DB --> PR : DataModel<Programmes>
deactivate DB
PR --> Service : DataModel<Programmes>
deactivate PR
Service --> Controller : DataModel<Programmes>
deactivate Service
Controller --> UI : List of Programmes
deactivate Controller
UI --> ACS : Display Programmes
deactivate UI

' ACS escolhe um Programme
ACS -> UI : Select Programme1ID
activate UI #application
UI --> ACS : Programme Selected
deactivate UI

' Segunda interação: Solicitar lista de Teachers
ACS -> UI : Show list of Teachers
activate UI #application
UI -> Controller : getAllTeachers()
activate Controller #application
Controller -> Service : getAllTeachers()
activate Service #application
Service -> TR : getAllTeachers()
activate TR #application
TR -> DB : fetchAllTeachers()
activate DB #application
DB -> DM : toDataModel(Teachers)
activate DM #application
DM --> DB : DataModel<Teachers>
deactivate DM
DB --> TR : DataModel<Teachers>
deactivate DB
TR --> Service: DataModel <Teachers>
deactivate TR
Service --> Controller : DataModel<Teachers>
deactivate Service
Controller --> UI : List of Teachers
deactivate Controller
UI --> ACS : Display Teachers
deactivate UI

' ACS escolhe um Teacher
ACS -> UI : Select Teacher1ID
activate UI #application
UI --> ACS : Teacher Selected
deactivate UI

' Terceira interação: Mudar o director do programa
ACS -> UI : Change Programme Director
activate UI #application
UI -> Controller : changeProgrammeDirector("Programme1ID", "Teacher1ID")
activate Controller #application

Controller -> Service : changeProgrammeDirector("Programme1ID", "Teacher1ID")
activate Service #application



Service -> PG : newProgrammeDirector(Teacher1)  ' Passa o Teacher para o Programme
activate PG #application
PG --> Service : true
deactivate PG


Service -> PR : updateProgrammeDirector
activate PR #application
PR -> DB : updateProgrammeDirector
activate DB #application
DB -> DM : toDataModel(Programme1)
activate DM #application
DM --> DB : DataModel<Programme1WithNewDirector>
deactivate DM
DB --> PR : true
deactivate DB
PR --> Service : true
deactivate PR


Service --> Controller : true
deactivate Service

Controller --> UI : Success!
deactivate Controller
UI --> ACS : Success!
deactivate UI

@enduml
