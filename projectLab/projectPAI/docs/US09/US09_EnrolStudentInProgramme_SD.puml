@startuml
skinparam sequenceMessageAlign center
skinparam sequenceLifeLineBackgroundColor lightblue
autonumber
actor ASC
participant ":UI" as UI
participant "ctrl1:EnrolAStudentInProgrammeController" as CTL #lightgreen
participant "sr1:<<Interface>>IStudentRepository" as StudentRepo #lightyellow
participant "s[i]:Student" as Student
participant "amr1:<<Interface>>IAccessMethodRepository" as AccessMethodRepo #lightyellow
participant "am[i]:AccessMethod" as AccessMethod
participant "prRepo1:<<Interface>>IProgrammeRepository" as ProgrammeRepo #lightyellow
participant "p[i]:Programme" as Programme
participant "per1:<<Interface>>IProgrammeEnrolmentRepository" as EnrolmentRepo #lightyellow
participant "pef1:ProgrammeEnrolmentFactoryImpl" as ProgrammeEnrolmentFactory
participant "pe[i]:ProgrammeEnrolment" as ProgrammeEnrolment
participant "pe1:ProgrammeEnrolment" as ProgrammeEnrolment1

ASC -> UI : I want to enrol a student in a programme.
activate UI
UI --> ASC : Student?
ASC -> UI : uniqueNumber
UI --> ASC : AccessMethod?
ASC -> UI : accessMethodName
UI --> ASC : Programme?
ASC -> UI : programmeName
UI --> ASC : Date?
ASC -> UI : enrolmentDateVO
UI -> CTL : I want to enrol a Student in a Programme \n (uniqueNumberDTO, accessMethodNameDTO,\n programmeNameDTO, enrolmentDateDTO)
activate CTL
|||
ref over CTL
    \t \t \t \t \t Convert DTO to VO \t
end ref
|||
CTL -> StudentRepo : getStudentByID(uniqueNumberVO)
activate StudentRepo

loop for each Student in StudentRepo
    StudentRepo -> Student : hasThisUniqueNumber(uniqueNumberVO)
    activate Student
    Student --> StudentRepo : s1VO
    deactivate Student
end
StudentRepo --> CTL : s1VO
deactivate StudentRepo

CTL -> AccessMethodRepo : getAccessMethodByID(accessMethodNameVO)
activate AccessMethodRepo
loop for each AccessMethod in AccessMethodRepository
    AccessMethodRepo -> AccessMethod : hasThisAccessMethodName(accessMethodNameVO)
    activate AccessMethod
    AccessMethod --> AccessMethodRepo : am1VO
    deactivate AccessMethod
end
AccessMethodRepo --> CTL : am1VO
deactivate AccessMethodRepo

CTL -> ProgrammeRepo : getProgrammeByID(programmeNameVO)
activate ProgrammeRepo
loop for each Programme in ProgrammeRepo
    ProgrammeRepo -> Programme : hasThisProgrammeName(programmeNameVO)
    activate Programme
    Programme --> ProgrammeRepo : p1VO
    deactivate Programme
end
ProgrammeRepo --> CTL : p1VO
deactivate ProgrammeRepo

CTL -> EnrolmentRepo: enrolStudent(s1VO, am1VO, p1VO, enrolmentDateVO)
activate EnrolmentRepo
create "pe1:ProgrammeEnrolment" as ProgrammeEnrolment
EnrolmentRepo -> ProgrammeEnrolmentFactory: createProgrammeEnrolment(s1VO, am1VO, p1VO, enrolmentDateVO)
activate ProgrammeEnrolmentFactory
ProgrammeEnrolmentFactory -> ProgrammeEnrolment1**: createProgrammeEnrolment(s1VO, am1VO, p1VO, enrolmentDateVO)

activate ProgrammeEnrolment1
ProgrammeEnrolment1 -> ProgrammeEnrolment1 : validateAndFormatDate(date)
ProgrammeEnrolment1 --> ProgrammeEnrolmentFactory: pe1VO
deactivate ProgrammeEnrolment1
ProgrammeEnrolmentFactory --> EnrolmentRepo: pe1VO
deactivate ProgrammeEnrolmentFactory

EnrolmentRepo -> EnrolmentRepo : isEnrolmentRepeated(pe1VO)

loop for each Enrolment in enrolmentRepository
    EnrolmentRepo -> ProgrammeEnrolment : hasSameEnrolment(pe1VO)
    activate ProgrammeEnrolment
    ProgrammeEnrolment --> EnrolmentRepo : False
    deactivate ProgrammeEnrolment
end

EnrolmentRepo -> EnrolmentRepo: enrolmentList.add(pe1VO)
EnrolmentRepo --> CTL: True
deactivate EnrolmentRepo

|||
ref over CTL
    \t \t \t \t \t Convert DTO to VO \t
end ref
|||

CTL --> UI : True
deactivate CTL
UI --> ASC : Success
deactivate UI
Deactivate EnrolmentRepo

@enduml