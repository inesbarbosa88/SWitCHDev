@startuml
autonumber
skinparam sequence {
   LifelineBorderColor black
   LifelineBackgroundColor LightBlue
 }
title US04: Register a Teacher in the System
actor Administrator #LightBlue/White
participant ": UI" as UI #LightBlue/White
participant ":US04_IWantToRegisterATeacherInTheSystemController" as Controller #LightBlue/White
participant ": IDepartmentRepository" as IDepartmentRepository #LightBlue/White
participant ": DepartmentRepositoryImpl" as DepartmentRepositoryImpl #LightBlue/White
participant ": ITeacherRepository" as ITeacherRepository #LightBlue/White
participant ": TeacherRepository" as TeacherRepository #LightBlue/White
participant ": ITeacherFactory" as ITeacherFactory #LightBlue/White
participant ": TeacherFactoryImpl" as TeacherFactoryImpl #LightBlue/White
participant "t1: Teacher" as Teacher #LightBlue/White
participant ": TeacherList" as TeacherI #LightBlue/White
participant ":Address" as Address #LightBlue/white
Administrator -> UI : I want to register a teacher in the system.
activate UI #ddfada

UI --> Administrator: What data: teacherAcronym, name, email, nif, phoneNumber,\n academicBackground,street,postalcode,location,country,departmentID?
Administrator -> UI: Enter data: teacherAcronym, name, email, nif, phoneNumber,\n academicBackground,street,postalcode,location,country, departmentID!
UI --> Administrator : Sure?
Administrator -> UI: Yes!
UI -> Controller : registerATeacherInTheSystem( teacherAcronym, name, email, nif, phoneNumber,\n academicBackground,street,postalcode,location,country, departmentID)
activate Controller #ddfada
ref over Controller
    Convert acronym and name to VO
end ref
Controller -> IDepartmentRepository : isDepartmentInDepartmentRepository(departmentID)

note left of Controller
The IDepartmentRepository interface is injected into the controller,
 acting as an intermediary. It delegates tasks to DepartmentRepositoryImpl,
 which is responsible for handling data storage and retrieval.
  Thats why both are included in the sequence diagram to reflect this flow.
end note
activate IDepartmentRepository  #ddfada
IDepartmentRepository -> DepartmentRepositoryImpl : isDepartmentInDepartmentRepository(departmentID)
activate DepartmentRepositoryImpl  #ddfada
DepartmentRepositoryImpl -->IDepartmentRepository : True
deactivate DepartmentRepositoryImpl
IDepartmentRepository -->Controller : True
deactivate IDepartmentRepository
Controller -> TeacherRepository: registerTeacher(teacherAcronym, name, email, nif, phoneNumber,\n academicBackground,Street,PostalCode,Location,Country, departmentID)
activate TeacherRepository #ddfada
TeacherRepository -> ITeacherFactory: createTeacher (teacherAcronym, name, email, nif, phoneNumber,\n academicBackground,Street,PostalCode,Location,Country, departmentID)
activate ITeacherFactory
ITeacherFactory -> TeacherFactoryImpl: createTeacher (teacherAcronym, name, email, nif, phoneNumber,\n academicBackground,Street,PostalCode,Location,Country, departmentID)
activate TeacherFactoryImpl

TeacherFactoryImpl -> Address **: **createAddress**(street, postalCode, location, country)
activate Address
Address --> TeacherFactoryImpl:\t addr1
deactivate Address

TeacherFactoryImpl -> Teacher **: **createTeacher**(teacherAcronymVO, nameVO, emailVO,\n nifVO, phoneNumberVO, addrsVO1,\n academicBackgroundVO, departmentIDVO)
activate Teacher

Teacher -> TeacherID **: **createTeacherID**(teacherAcronym)
activate TeacherID

TeacherID --> Teacher: tID1
deactivate TeacherID
Teacher --> TeacherFactoryImpl: \t t1
deactivate Teacher

TeacherFactoryImpl --> TeacherRepository: t1
deactivate TeacherFactoryImpl

activate Teacher
ref over TeacherRepository, Teacher
    Check if a teacher is already registered
end ref

TeacherRepository -> TeacherRepository: **save** (t1)
deactivate Teacher

TeacherRepository -> Teacher: **identity()**
activate Teacher
Teacher --> TeacherRepository: tID1
deactivate Teacher
TeacherRepository --> ITeacherRepository: true
ITeacherRepository --> Controller : true
Controller -> UI: True
UI -> Administrator : Success

@enduml
