@startuml
autonumber
skinparam sequence {
   LifelineBorderColor black
   LifelineBackgroundColor LightBlue
 }
title US04: Register a Teacher in the System
actor Administrator #LightBlue/White
participant ": UI" as UI #LightBlue/White
participant ":US04_IWantToRegisterATeacherInTheSystemController" as Controller #LightBlue/White
participant "ITeacherService" as ITeacherService #LightBlue/White
participant "TeacherServiceImpl" as TeacherServiceImpl #LightBlue/White
participant ": ITeacherRepository" as ITeacherRepository #LightBlue/White
participant ": ITeacherRepositorySpringData" as ITeacherRepositorySpringData #LightBlue/White
participant ": TeacherRepositorySpringDataImpl" as TeacherRepositorySpringDataImpl #LightBlue/White
participant ": IDepartmentRepository" as IDepartmentRepository #LightBlue/White
participant ": IDepartmentRepositorySpringData" as IDepartmentRepositorySpringData #LightBlue/White
participant ": DepartmentRepositorySpringDataImpl" as DepartmentRepositorySpringDataImpl #LightBlue/White
Administrator -> UI : I want to register a teacher in the system.
activate UI #ddfada

UI --> Administrator: What data: teacherAcronym, name, email, nif, phoneNumber,\n academicBackground,street,postalcode,location,country,departmentID?
Administrator -> UI: Enter data: teacherAcronym, name, email, nif, phoneNumber,\n academicBackground,street,postalcode,location,country, departmentID!
UI --> Administrator : Sure?
Administrator -> UI: Yes!
ref over Controller
    Convert acronym and name to VO
end ref
UI -> Controller : registerATeacherInTheSystem( teacherAcronym, name, email, nif, phoneNumber,\n academicBackground,street,postalcode,location,country, departmentID)
activate Controller #ddfada
Controller -> ITeacherService : registerTeacher()
activate ITeacherService #ddfada
ref over TeacherServiceImpl
    Convert Domain to DataModel
end ref
ITeacherService -> TeacherServiceImpl : registerTeacher()
activate TeacherServiceImpl #ddfada
TeacherServiceImpl -> IDepartmentRepository: IsDepartmentInRepository(DepartmentID)
activate IDepartmentRepository #ddfada
IDepartmentRepository -> IDepartmentRepositorySpringData: IsDepartmentInRepository(DepartmentID)
activate IDepartmentRepositorySpringData #ddfada
IDepartmentRepositorySpringData -> DepartmentRepositorySpringDataImpl: IsDepartmentInRepository(DepartmentID)
activate DepartmentRepositorySpringDataImpl #ddfada

IDepartmentRepositorySpringData <-- DepartmentRepositorySpringDataImpl: true
deactivate DepartmentRepositorySpringDataImpl #ddfada
IDepartmentRepository <-- IDepartmentRepositorySpringData: true
deactivate IDepartmentRepositorySpringData #ddfada
TeacherServiceImpl <-- IDepartmentRepository: true
deactivate IDepartmentRepository #ddfada



TeacherServiceImpl -> ITeacherRepository :RegisterTeacher()
activate ITeacherRepository #ddfada
ITeacherRepository -> ITeacherRepositorySpringData :saveTeacher()
activate ITeacherRepositorySpringData #ddfada
ITeacherRepositorySpringData -> TeacherRepositorySpringDataImpl :saveTeacher()
activate TeacherRepositorySpringDataImpl #ddfada
TeacherRepositorySpringDataImpl --> ITeacherRepositorySpringData: true
deactivate TeacherRepositorySpringDataImpl
ITeacherRepositorySpringData --> ITeacherRepository: true
deactivate ITeacherRepositorySpringData
ITeacherRepository -->TeacherServiceImpl: true
deactivate ITeacherRepository
TeacherServiceImpl -->ITeacherService: true
deactivate TeacherServiceImpl
ref over TeacherServiceImpl
Convert DataModel to Domain
end ref
ITeacherService --> Controller : true
deactivate ITeacherService
Controller --> UI: True
deactivate Controller
UI --> Administrator : Success
deactivate UI

@enduml
