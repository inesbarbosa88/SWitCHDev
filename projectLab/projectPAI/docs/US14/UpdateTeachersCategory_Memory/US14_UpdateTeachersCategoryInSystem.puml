@startuml
skinparam sequenceMessageAlign center
skinparam sequenceLifeLineBackgroundColor #lightblue
autonumber
title: As a HRC, I want to update the teacherâ€™s category in the system.

actor HRC
participant ":UI" as UI #white
participant "ctrl:UpdateTeachersCategoryController" as Controller #lightgreen
participant "teacherRepo:TeacherRepository" as TeacherRepo #Silver
participant "teacherList :List<Teacher>" as TeacherList #Yellow/Silver
participant "categoryRepo:TeacherCategoryRepository" as TeacherCategoryRepo #Silver
participant "tcList :List<TeacherCategories>" as tcList #Yellow/Silver
participant ":TeacherCategory" as TeacherCategory #lightyellow
participant "newDateVO :DateVO" as newDateVO #lightblue
participant "newTeacherCategoryIDVO :TeacherCategoryIDVO" as tcVO #lightblue
participant "teacherAcronymVO :TeacherAcronymVO" as teacherAcronymVO #lightblue
participant "teacherIDVO :TeacherIDVO" as teacherIDVO #lightblue
participant ":Teacher" as Teacher #lightyellow
participant "tcpRepo: TeacherCareerProgressionRepository" as TCPRepo #Silver
participant "tcpList :List<TeacherCareerProgressions>" as tcpList #Yellow/Silver
participant "lastTCP:TeacherCareerProgression" as TCP #lightyellow
participant "tcpFactory :tcpFactory" as tcpFactory #burlywood
participant "newTCP :TeacherCareerProgression" as newTCP #lightyellow

HRC -> UI : I want to update the Teacher's Category

activate HRC

activate UI
UI -> Controller : findAllTeachers()

activate Controller
Controller -> TeacherRepo : findAll()

activate TeacherRepo
TeacherRepo --> Controller : teachersList
deactivate TeacherRepo

Controller --> UI : teachersList
deactivate Controller

UI --> HRC : Which Teacher?
deactivate UI

HRC -> UI : Teacher's Acronym

activate UI
UI -> Controller : findAllTeacherCategories()

activate Controller
Controller -> TeacherCategoryRepo : findAll()

activate TeacherCategoryRepo
TeacherCategoryRepo --> Controller : categoryList
deactivate TeacherCategoryRepo

Controller --> UI : categoryList
deactivate Controller

UI --> HRC : Which Category?
deactivate UI

HRC -> UI : Teacher Category

activate UI
UI --> HRC : What date?
deactivate UI

HRC -> UI : Date

activate UI
UI -> Controller : updateTeacherCategoryInTeacherCareerProgression \n (teacherAcronym, date, teacherCategory)

activate Controller

Controller -> newDateVO** : createDateVO(date)
activate newDateVO
newDateVO -> newDateVO : validate and format date
newDateVO --> Controller : newDateVO
deactivate newDateVO

Controller -> tcVO** : createNameTeacherCategory(teacherCategory)
activate tcVO
tcVO -> tcVO : isNameValid()
tcVO --> Controller : newNameTeacherCategoryVO
deactivate tcVO

Controller -> TeacherCategoryRepo : getTeacherCategoryIDFromName(newNameTeacherCategoryVO)
activate TeacherCategoryRepo
loop
    TeacherCategoryRepo -> TeacherCategory : category.getName().equals(newNameTeacherCategoryVO)
    activate TeacherCategory

    TeacherCategory -> TeacherCategoryRepo : true
    deactivate TeacherCategory
end
TeacherCategoryRepo -> Controller : optionalTeacherCategoryID
deactivate TeacherCategoryRepo



Controller -> Controller : teacherCategoryID = optionalTeacherCategoryID.get()

Controller -> teacherAcronymVO** : createTeacherAcronymVO(teacherAcronym)
activate teacherAcronymVO
teacherAcronymVO -> teacherAcronymVO : isTeacherAcronymValid()
teacherAcronymVO -> Controller : teacherAcronymVO
deactivate teacherAcronymVO

Controller -> teacherIDVO** : createTeacherIDVO(teacherAcronymVO)
activate teacherIDVO
teacherIDVO -> teacherIDVO : validate teacherID
teacherIDVO --> Controller : teacherIDVO
deactivate teacherIDVO

Controller -> TeacherRepo: containsOfIdentity(teacherIDVO)
activate TeacherRepo
loop
    TeacherRepo -> Teacher : teacher.identity().equals(teacherIdVO1)
    activate Teacher

    Teacher --> TeacherRepo : True
    deactivate Teacher
end
TeacherRepo -> Controller: True
deactivate TeacherRepo

Controller -> TCPRepo : updateTeacherCategoryInTeacherCareerProgression \n(teacherIDVO, newDateVO, newTeacherCategoryIDVO)
activate TCPRepo
TCPRepo -> TCPRepo : optionalTCP = findLastTCPFromTeacherID(teacherIDVO)
TCPRepo -> TCPRepo : lastTCP = optionalTCP.get()

TCPRepo -> TCP : lastTCP.isLastDateEqualOrBeforeNewDate(newDateVO)
activate TCP
TCP --> TCPRepo: True
deactivate TCP

TCPRepo -> TCP : lastTCP.getWorkingPercentage()
activate TCP
TCP --> TCPRepo : lastWorkingPercentageVO
deactivate TCP

TCPRepo -> TCP : lastTCP.getTeacherCategoryID()
activate TCP
TCP --> TCPRepo : lastTeacherCategoryIDVO
deactivate TCP

TCPRepo -> TCPRepo : validate if lastTeacherCategoryIDVO \nis different from newTeacherCategoryIDVO

TCPRepo -> tcpFactory : createTeacherCareerProgression \n(newDateVO, lastWorkingPercentageVO, newTeacherCategoryIDVO, teacherIDVO)
activate tcpFactory

tcpFactory -> newTCP** : createTeacherCareerProgression \n(newDateVO, lastWorkingPercentageVO, newTeacherCategoryIDVO, teacherIDVO)
activate newTCP
newTCP --> tcpFactory : newTCP
deactivate newTCP

tcpFactory --> TCPRepo : newTCP
deactivate tcpFactory

TCPRepo -> TCPRepo :isTeacherCareerProgressionDuplicated(newTCP)
TCPRepo -> TCPRepo: save(newTCP)
TCPRepo --> Controller : True
deactivate TCPRepo

Controller --> UI : True
deactivate Controller

UI --> HRC : Success
deactivate UI

deactivate HRC

@enduml