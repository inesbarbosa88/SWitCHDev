@startuml
actor admin
autonumber
title US01 - Configure TeacherCategory (DDD) V2

participant ":UI" as UI <<application>>
participant US01_ConfigureTeacherCategoryController as Controller <<application>>
participant ITeacherCategoryRepository as Repository <<domain/infrastructure>>
participant Name as VOName <<domain>>
participant TeacherCategoryFactoryImpl as Factory <<domain>>
participant TeacherCategory as TC <<domain>>

' Step 1: Admin interacts with UI
admin -> UI : I want to configure a new Teacher Category
UI --> admin : Please provide category name

admin -> UI : (categoryName)
UI -> Controller : configureTeacherCategory(categoryName)

' Step 2: Controller delegates VO creation & persistence to Repository
activate Controller
Controller -> Repository : registerTeacherCategory(categoryName : String)
deactivate Controller

' Step 3: Repository creates Name VO
activate Repository
Repository -> VOName : new Name(categoryName)
VOName --> Repository : nameVO

' Step 4: Repository checks duplicates
Repository -> Repository : existsByName(nameVO)
alt not exists
    ' Step 5: Repository creates aggregate via Factory
    Repository -> Factory : createTeacherCategory(nameVO)
    activate Factory
    Factory -> TC : «create»(TeacherCategoryID, nameVO)
    Factory --> Repository : TeacherCategory
    deactivate Factory

    ' Step 6: Repository saves the aggregate
    Repository -> Repository : save(TeacherCategory)
    Repository --> Controller : true
else exists
    Repository --> Controller : false
end
deactivate Repository

' Step 7: Controller handles result
activate Controller
alt false
    Controller --> UI : throw Exception("Category already exists…")
else true
    Controller --> UI : return true
end
deactivate Controller
@enduml
