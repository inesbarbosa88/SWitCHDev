@startuml

skinparam ranksep 180
skinparam linetype ortho
skinparam nodesep 180

package "PAI" {

  ' ======= DDD Base Interfaces =======
  interface "<<DDD>>\nAggregateRoot<ID>" as IAggregateRoot
  interface "<<DDD>>\nDomainEntity<ID>" as IDomainEntity
  interface "<<DDD>>\nValueObject" as IValueObject
  interface "<<DDD>>\nDomainId" as IDomainId
  interface "<<DDD>>\nIRepository<ID, T>" as IRepository

  ' ======= AGGREGATE =======
  package "domain" {
    entity "<<Root>>\n<<Aggregate>>\nTeacherCategory" as TCA {
      + TeacherCategory(id: TeacherCategoryID, name: Name)
      + getId(): TeacherCategoryID
      + getName(): Name
      + getIdValue(): UUID
      + getNameValue(): String
      + identity(): TeacherCategoryID
      + sameAs(Object obj): boolean
      + equals(Object obj): boolean
      + hashCode(): int
    }
  }

  ' ======= VALUE OBJECTS =======
  package "VOs" {
    class "<<Value Object>>\nName" as VOName {
      - _name: String
      + Name(String name)
      + getName(): String
      + equals(Object obj): boolean
      + hashCode(): int
    }

    class "<<Value Object>>\nTeacherCategoryID" as VOId {
      - value: UUID
      + TeacherCategoryID(UUID value)
      + getValue(): UUID
      + equals(Object obj): boolean
      + hashCode(): int
    }

    VOId ..|> IDomainId
    VOId ..|> IValueObject
    VOName ..|> IValueObject
  }

  ' Associations
  TCA "1" --> "1" VOName : uses
  TCA "1" --> "1" VOId : uses
  TCA ..|> IAggregateRoot
  TCA ..|> IDomainEntity

  ' ======= FACTORY =======
  package "factory" {
    interface "<<Factory>>\nITeacherCategoryFactory" as IFactory {
      + createTeacherCategory(name: Name): TeacherCategory
    }

    class "TeacherCategoryFactoryImpl" as FactoryImpl {
      + createTeacherCategory(name: Name): TeacherCategory
    }

    IFactory <|.. FactoryImpl
    FactoryImpl --> TCA : creates
    FactoryImpl --> VOName : uses
    FactoryImpl --> VOId : generates

    interface "<<List Factory>>\nITeacherCategoryListFactory" as IListFactory {
      + getTeacherCategoryList(): List<TeacherCategory>
    }

    class "TeacherCategoryListFactoryImpl" as ListFactoryImpl {
      + getTeacherCategoryList(): List<TeacherCategory>
    }

    IListFactory <|.. ListFactoryImpl
  }

  ' ======= REPOSITORY =======
  package "repository" {
    interface "<<Repository>>\nITeacherCategoryRepository" as IRepo {
      + save(category: TeacherCategory): TeacherCategory
      + ofIdentity(id: TeacherCategoryID): Optional<TeacherCategory>
      + containsOfIdentity(id: TeacherCategoryID): boolean
      + findAll(): Iterable<TeacherCategory>
      + existsByName(name: Name): boolean
      + registerTeacherCategory(name: Name): boolean
      + getTeacherCategoryList(): List<TeacherCategory>
      + findByName(name: Name): Optional<TeacherCategory>
      + getTeacherCategoryIDFromName(name: Name): Optional<TeacherCategoryID>
    }

    class "TeacherCategoryRepositoryImpl" as RepoImpl {
      + save(category: TeacherCategory): TeacherCategory
      + ofIdentity(id: TeacherCategoryID): Optional<TeacherCategory>
      + containsOfIdentity(id: TeacherCategoryID): boolean
      + findAll(): Iterable<TeacherCategory>
      + existsByName(name: Name): boolean
      + registerTeacherCategory(name: Name): boolean
      + getTeacherCategoryList(): List<TeacherCategory>
      + findByName(name: Name): Optional<TeacherCategory>
      + getTeacherCategoryIDFromName(name: Name): Optional<TeacherCategoryID>
    }

    IRepository <|.. IRepo
    IRepo <|.. RepoImpl

    RepoImpl --> TCA : stores
    RepoImpl --> VOId : looks up
    RepoImpl --> IFactory : uses
    RepoImpl --> IListFactory : uses
  }

  ' ======= CONTROLLER =======
  package "controller" {
    class "US01_ConfigureTeacherCategoryController" as Controller {
      + configureTeacherCategory(categoryName: String): boolean
    }

    Controller --> IRepo : registerTeacherCategory(name)
  }
}

@enduml
