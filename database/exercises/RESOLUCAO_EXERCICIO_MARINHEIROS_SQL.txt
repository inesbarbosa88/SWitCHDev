EXERCICIO MARINHEIROS:
--------------------------------------------------------------------------------------------------------------------------------------------------------------

--eliminar tabelas (eventualmente) existentes

DROP TABLE marinheiros  CASCADE CONSTRAINTS PURGE;
DROP TABLE barcos       CASCADE CONSTRAINTS PURGE;
DROP TABLE reservas     CASCADE CONSTRAINTS PURGE;

--criar tabelas

CREATE TABLE marinheiros(
  id_marinheiro 	INTEGER 	CONSTRAINT pk_marinheiros_id_marinheiro PRIMARY KEY,
  nome 	            VARCHAR(30)	CONSTRAINT nn_marinheiros_nome          NOT NULL,
  classificacao 	INTEGER		CONSTRAINT nn_marinheiros_classificacao NOT NULL,
  idade 		    INTEGER	    CONSTRAINT nn_marinheiros_idade         NOT NULL
);

CREATE TABLE barcos(
  id_barco 	INTEGER     CONSTRAINT pk_barcos_id_barcos 	PRIMARY KEY,
  nome      VARCHAR(20) CONSTRAINT nn_barcos_nome       NOT NULL,
  cor       VARCHAR(10) CONSTRAINT nn_barcos_cor        NOT NULL
);

CREATE TABLE reservas(
  id_marinheiro INTEGER,
  id_barco 	    INTEGER,
  data 	        DATE        CONSTRAINT nn_reservas_data  NOT NULL, 
  CONSTRAINT pk_reservas_id_marinheiro_id_barco PRIMARY KEY(id_marinheiro, id_barco, data)
);

ALTER TABLE reservas ADD CONSTRAINT fk_reservas_id_marinheiro   FOREIGN KEY (id_marinheiro) REFERENCES marinheiros(id_marinheiro);
ALTER TABLE reservas ADD CONSTRAINT fk_reservas_id_barco        FOREIGN KEY (id_barco)      REFERENCES barcos(id_barco);

--preencher tabelas
  
INSERT INTO marinheiros VALUES(22, 'Dustin',  7, 45);
INSERT INTO marinheiros VALUES(29, 'Brutus',  1, 33);
INSERT INTO marinheiros VALUES(31, 'Lubber',  8, 55);
INSERT INTO marinheiros VALUES(32, 'Andy',    8, 25);
INSERT INTO marinheiros VALUES(58, 'Rusty',  10, 35);
INSERT INTO marinheiros VALUES(64, 'Hor cio', 7, 35);
INSERT INTO marinheiros VALUES(71, 'Zorba',  10, 16);
INSERT INTO marinheiros VALUES(74, 'Hor cio', 9, 35);
INSERT INTO marinheiros VALUES(85, 'Art',     3, 25);
INSERT INTO marinheiros VALUES(95, 'Bob',     3, 63);
INSERT INTO marinheiros VALUES(13, 'Popeye',  3, 22);
INSERT INTO marinheiros VALUES(44, 'Haddock', 3, 63);

INSERT INTO barcos VALUES(101, 'Interlake', 'azul');
INSERT INTO barcos VALUES(102, 'Interlake', 'vermelho');
INSERT INTO barcos VALUES(103, 'Clipper',   'verde');
INSERT INTO barcos VALUES(104, 'Marine',    'vermelho');
  
INSERT INTO reservas VALUES(22, 101, TO_DATE('2017/10/10','yyyy/mm/dd'));
INSERT INTO reservas VALUES(22, 102, TO_DATE('2017/10/10','yyyy/mm/dd'));
INSERT INTO reservas VALUES(22, 103, TO_DATE('2017/08/10','yyyy/mm/dd'));
INSERT INTO reservas VALUES(22, 104, TO_DATE('2017/07/10','yyyy/mm/dd'));
INSERT INTO reservas VALUES(31, 102, TO_DATE('2017/10/11','yyyy/mm/dd'));
INSERT INTO reservas VALUES(31, 103, TO_DATE('2017/06/11','yyyy/mm/dd'));
INSERT INTO reservas VALUES(31, 104, TO_DATE('2017/12/11','yyyy/mm/dd'));
INSERT INTO reservas VALUES(64, 101, TO_DATE('2017/05/09','yyyy/mm/dd'));
INSERT INTO reservas VALUES(64, 102, TO_DATE('2017/08/09','yyyy/mm/dd'));
INSERT INTO reservas VALUES(64, 102, TO_DATE('2017/09/09','yyyy/mm/dd'));
INSERT INTO reservas VALUES(64, 102, TO_DATE('2017/10/09','yyyy/mm/dd'));
INSERT INTO reservas VALUES(74, 103, TO_DATE('2017/08/09','yyyy/mm/dd'));
INSERT INTO reservas VALUES(44, 101, TO_DATE('2018/05/09','yyyy/mm/dd'));
INSERT INTO reservas VALUES(44, 101, TO_DATE('2018/09/09','yyyy/mm/dd'));

----------------------------------------------------------------------------------------------------------------------------------------------------------------------


1) Mostrar o id, o nome, a classificação dos marinheiros e o comentário “Superior à Média” associado apenas aos marinheiros que têm classificação superior à média.

-- SELECT 
  id_marinheiro, 
  nome, 
  classificacao, 
  'Superior à Média' AS comentario
FROM 
  marinheiros
WHERE 
  classificacao > (SELECT AVG(classificacao) FROM marinheiros);



2) Mostrar o nome e a idade dos marinheiros que não reservaram barcos entre junho e dezembro de 2022. O resultado deve ser apresentado por ordem alfabética do nome.

-- SELECT 
  nome, 
  idade
FROM 
  marinheiros
WHERE 
  id_marinheiro NOT IN (
    SELECT 
      id_marinheiro
    FROM 
      reservas
    WHERE 
      data BETWEEN TO_DATE('2022-06-01', 'YYYY-MM-DD') 
              AND TO_DATE('2022-12-31', 'YYYY-MM-DD')
  )
ORDER BY 
  nome ASC;


3) Mostrar o nome dos marinheiros que reservaram sempre o mesmo barco. Deve mostrar também o id e a cor do barco reservado.

--SELECT 
  marinheiros.nome AS nome_marinheiro, 
  reservas.id_barco AS ID_barco, 
  barcos.cor AS cor_barco
FROM 
  marinheiros marinheiros
JOIN 
  reservas reservas
ON 
  marinheiros.id_marinheiro = reservas.id_marinheiro
JOIN 
  barcos barcos
ON 
  reservas.id_barco = barco.id_barco
GROUP BY 
  marinheiros.nome, reservas.id_barco, barcos.cor
HAVING 
  COUNT(DISTINCT reservas.id_barco) = 1
ORDER BY 
  marinheiros.nome;



4) Mostrar o nome dos barcos que foram reservados por todos os marinheiros com idade igual a 20 anos.

--SELECT 
  barcos.nome AS nome_barco
FROM 
  barcos
JOIN 
  reservas
ON 
  barcos.id_barco = reservas.id_barco
JOIN 
  marinheiros
ON 
  reservas.id_marinheiro = marinheiros.id_marinheiro
WHERE 
  marinheiros.idade = 20
GROUP BY 
  barcos.nome;


5) Mostre o nome dos marinheiros que reservaram pelo menos dois barcos.
--Select 
	marinheiros.nome as nome marinheiro
  From 
	marinheiros
  JOIN
	reservas
  ON
	marinheiro.id_marinheiro=reservas.id_marinheiro
  GROUP BY 
	marinheiros.nome
  HAVING 
	COUNT (DISTINCT reservas.id_barco) >=2;


	

6) Mostrar o nome dos marinheiros com avaliação maior do que qualquer marinheiro chamado Horácio.
-- SELECT 
   nome 
FROM 
  marinheiros
WHERE 
    classificacao > (
    SELECT 
      MAX(classificacao)
    FROM 
      marinheiros
    WHERE 
      nome = 'Horácio'
  );



7) Mostre o id e 0 nome dos marinheiros que reservaram dois barcos diferentes no mesmo dia.
-- Select
	marinheiros.ID_marinheiro,
	marinheiros.nome_marinheiro,
   From 
	marinheiros
   JOIN
	reservas
   ON
	marinheiros.id_marinheiro=reservas.id_marinheiro
   GROUP BY
	marinheiros.id_marinheiro, marinheiros.nome, reservas.data
   HAVING 
	COUNT(DISTINCT reservas.id_barco) = 2;


8) Mostre o nome e a classificação dos marinheiro cuja classificação é melhor do que qualquer marinheiro chamado Horácio.
-- SELECT 
   nome, classificacao
FROM 
  marinheiros
WHERE 
    classificacao > (
    SELECT 
      MAX(classificacao)
    FROM 
      marinheiros
    WHERE 
      nome = 'Horácio'
  );



9) Para cada barco que foi reservado por pelo menos 5 marinheiros com idade >= 40, mostre o id do barco e a idade média de todos os marinheiros que reservaram o barco.

-- SELECT 
  reservas.id_barco, 
  AVG(marinheiros.idade) AS idade_media
FROM 
  reservas
JOIN 
  marinheiros
ON 
  reservas.id_marinheiro = marinheiros.id_marinheiro
WHERE 
  marinheiros.idade >= 40
GROUP BY 
  reservas.id_barco
HAVING 
  COUNT(DISTINCT reservas.id_marinheiro) >= 5;



10) Mostre a idade do marinheiro mais jovem com idade superior a 18 anos, para cada categoria com pelo menos 2 marinheiros (de qualquer idade).
-- SELECT 
  MIN(marinheiros.idade) AS idade_marinheiro_mais_jovem
FROM 
  marinheiros
WHERE 
  marinheiros.idade > 18
GROUP BY 
  marinheiros.id_marinheiros
HAVING 
  COUNT(marinheiros.id_marinheiro) >= 2;








